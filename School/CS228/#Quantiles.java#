package edu.iastate.cs228.hw2;

import java.lang.String;
import java.lang.IllegalArgumentException;

/**
 * A class for generating and analyzing q-quantiles of datasets
 * 
 * @author
 */
public class Quantiles {

    /* Variables to store the quantiles, size of the data, totals, etc */

    int[] quants = new int[0];
    int n = 0;
    int topTotal = 0;
    int bottomTotal = 0;
    
    /* NOTE: Do not store the original data */

    /**
     * A constructor that creates a new Quantiles object, whose quantiles array
     * has length q - 1, and contains the q-quantiles of the data array. The
     * expected time complexity of this method must be O(n * q), or better,
     * where n = data.length.
     * 
     * @param data
     * - The integers to split into q-quantiles
     * @param q
     * - The number of q-quantiles to create
     * 
     * @throws IllegalArgumentException
     * - If q < 1 or if q > n
     */
    public Quantiles(int[] data, int q) {
        // TODO
        n = data.length;
	    
	if( q< 1 || q > n){
	    System.out.println ("Inoperable quintile size.");}
	else{
	
	    int[] hold = new int[data.length];

	    for(int i = 0;i<data.length;++i){
	    

	
        
       
	    }}}

    /**
     * A constructor that creates a new Quantiles object, whose quantiles array,
     * has length three, and is initialized to contain the three quantiles of
     * data. The expected time complexity of this method must be O(n), where n =
     * data.length.
     * 
     * @param data
     * - The integers to split into q-quantiles
     * @throws IllegalArgumentException
     * - If n < 4
     */
    public Quantiles(int[] data) {
        // TODO
    }

    /**
     * An optional constructor that creates a new Quantiles object, whose
     * quantiles array has length q - 1, and is initialized to contain the
     * q-quantiles of the data array.
     * 
     * If fast is true, then the expected time complexity of this method must be
     * O(n log q), where n = data.length, where n = data.length (for this, you
     * must implement the method such as the one outlined in Section 2.2.
     * 
     * If fast is false, then the expected time complexity of this method is
     * only required to be O(n * q), but may be faster
     * 
     * @param data
     * - The integers to split into q-quantiles
     * @param q
     * - The number of q-quantiles to create
     * @param fast
     * - Flag to request a O(n log q) construction
     * 
     * @throws IllegalArgumentException
     * - If q < 1 or if q > n
     */
    public Quantiles(int[] data, int q, boolean fast) {
        // TODO
    }

    /**
     * Returns the k-th q-quantile of this object. This method must take O(1)
     * time in the worst case.
     * 
     * @param k
     * - Specifies which q-quantile to return
     * @return - The k-th q-quantile
     * 
     * @throws IllegalArgumentException
     * - If k < 1 or k is greater than the number of quantiles of this object
     */
    public int getQuantile(int k) {
        // TODO
        return -1;
    }

    /**
     * Returns the number of quantiles in this object. This method must take
     * O(1) time in the worst case.
     * 
     * @return - The number of quantiles in this object
     */
    public int getQ() {
        // TODO
        return -1;
    }

    /**
     * Returns the index of the quantile group that contains x:
     * 
     * - If x is less than or equal to the first quantile, then return 1.
     * 
     * - If x is strictly greater than the last quantile (quantile q - 1), then
     * return q.
     * 
     * - Otherwise, return the smallest index k such that x is less than or
     * equal to the k-th q- quantile.
     * 
     * This method must take O(log k) time in the worst case.
     * 
     * @param x
     * - The item to find the quantile of
     * @return - The quantile containing x as described above
     */
    public int quantileQuery(int x) {
        // TODO
        return -1;
    }

    /**
     * Returns the sum of all values that are strictly higher than the (q - 1)th
     * q-quantile in the original data array. This method must take O(1) time in
     * the worst case.
     * 
     * @return - sum of all values that are strictly higher than the (q - 1)th
     * q-quantile
     */
    public int getTopTotal(){
        return topTotal;}

    /**
     * Returns the sum of all vales that are smaller than or equal to the first
     * quantile in the original data array. This method must take O(1) time in
     * the worst case.
     * 
     * @return - the sum of all vales that are smaller than or equal to the
     * first quantile
     */
    public int getBottomTotal(){
        return bottomTotal;}

    /**
     * Returns the ratio of getTopTotal() to getBottomTotal() for this object.
     * This method must take O(1) time in the worst case.
     * 
     * @return - the ratio
     */
    public float ineqRatio() {
        // TODO
        return -1.0f;
    }

    /**
     * Returns the length of the original data array. This method must take O(1)
     * time in the worst case.
     * 
     * @return - the size of the original data array
     */
    public int size() {
        // TODO
        return -1;
    }

    /**
     * Overrides the toString() method, returning a String in the format given
     * on page 6 of the project specifications.
     * 
     * @return - the String representation of this object
     */
    @Override
    public String toString() {
        // TODO
        return null;}

    /**
       Takes array and finds ith smalles value in the array in this range.

       @return value of ith smallest value in array.
     */
    private int select(int[] arr, int first, int last, int i){
	if(first == last)
	    return arr[first];
	int p = partition(arr,first,last);
	int k = p - first + 1;
	if(i == k){
	    return arr[p];}
	else if(i < k){
	    return select(arr,first,p-1,i);}
	else
	    return select(arr,p+1,last,i-k);}
		    
    /**
       Takes an array and puts all values lower than a value to the left, and all values higher to the right.
       
       @return position of value "sorted"
     */

    
    private int partition(int[] arr,int first, int last){
	int pivot = arr[last];
        int i = first - 1;
	for(int j = first;j > last; ++j){
	    if(arr[j] <= pivot){
		++i;
		int holder = arr[i];
		arr[i] = arr[j];
		arr[j] = holder;}}
	
	int holder = arr[i+2];
	arr[i+2] = arr[last];
	arr[last] = holder;
	return (i + 1);}}
    
